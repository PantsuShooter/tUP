//
//  AuthorizationStoryViewController.swift
//  tUP
//
//  Created by Home on 07.03.2020.
//  Copyright (c) 2020 Home. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Nuke

protocol AuthorizationStoryDisplayLogic: class {
    func displayPhoto(viewModel: AuthorizationStory.Photo.ViewModel)
    func displayError(viewModel: AuthorizationStory.Photo.ViewModel)
}

class AuthorizationStoryViewController: UIViewController, AuthorizationStoryDisplayLogic {

    var interactor: AuthorizationStoryBusinessLogic?
    var router: (NSObjectProtocol & AuthorizationStoryRoutingLogic & AuthorizationStoryDataPassing)?
  
    @IBOutlet weak var backGroundImageView: UIImageView!
    @IBOutlet weak var loginItemsStackView: UIStackView!
    @IBOutlet weak var appNameLabel: UILabel!

    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
      
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = AuthorizationStoryInteractor()
        let presenter = AuthorizationStoryPresenter()
        let router = AuthorizationStoryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        let request = AuthorizationStory.Photo.Request()
        interactor?.getRandomPhoto(request: request)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        UIView.animate(withDuration: 0.3) { [weak self] in
            self?.loginItemsStackView.alpha = 1
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    func displayPhoto(viewModel: AuthorizationStory.Photo.ViewModel) {
      
        guard let url = viewModel.photoUrl else { return }
        

        Nuke.loadImage(with: url, options: ImageLoadingOptions.shared, into: backGroundImageView, progress: nil) { response, error in
            
            UIView.animate(withDuration: 0.6) { [weak self] in
                self?.backGroundImageView.alpha = 1
            }
            
        }
//
////        let task = ImagePipeline.shared.loadImage(with: url, progress: {[weak self] response, _, _ in
////            self?.backGroundImageView.image = response?.image
////        }) { [weak self] response, error in
////            self?.backGroundImageView.image = response?.image
////        }
        
        //Nuke.loadImage(with: url, into: backGroundImageView)
    }
    
    func displayError(viewModel: AuthorizationStory.Photo.ViewModel) {
        
        debugPrint(viewModel)
        
    }
}

private extension AuthorizationStoryViewController {
    
    func setupUI() {
        
        addMoution()
        navigationController?.setNavigationBarHidden(true, animated: false)
        backGroundImageView.alpha = 0
        loginItemsStackView.alpha = 0
        
    }
    
    func addMoution() {
        
        let min = CGFloat(-5)
        let max = CGFloat(5)
        let motionEffectGroup = UIMotionEffectGroup()
        let xMotion = UIInterpolatingMotionEffect(keyPath: "layer.transform.translation.x", type: .tiltAlongHorizontalAxis)
        let yMotion = UIInterpolatingMotionEffect(keyPath: "layer.transform.translation.y", type: .tiltAlongVerticalAxis)

        
        xMotion.minimumRelativeValue = min
        xMotion.maximumRelativeValue = max
              
        yMotion.minimumRelativeValue = min
        yMotion.maximumRelativeValue = max
              
        motionEffectGroup.motionEffects = [xMotion,yMotion]
        backGroundImageView.addMotionEffect(motionEffectGroup)
        
        xMotion.minimumRelativeValue = max
        xMotion.maximumRelativeValue = min
        
        yMotion.minimumRelativeValue = max
        yMotion.maximumRelativeValue = min
        
        motionEffectGroup.motionEffects = [xMotion,yMotion]
        appNameLabel.addMotionEffect(motionEffectGroup)
    }
}
